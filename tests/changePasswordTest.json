{
	"info": {
		"_postman_id": "d049e258-f253-4192-a4d5-8d47c1cda34b",
		"name": "Changing Password Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "44369905",
		"_collection_link": "https://ali-9923282.postman.co/workspace/Ali's-Workspace~ff333d69-3515-4fac-8abf-ce5483a5fed0/collection/44369905-d049e258-f253-4192-a4d5-8d47c1cda34b?action=share&source=collection_link&creator=44369905"
	},
	"item": [
		{
			"name": "Registering User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const firstname = pm.variables.replaceIn('{{$randomFirstName}}');",
							"",
							"const lastname = pm.variables.replaceIn('{{$randomLastName}}');",
							"",
							"const email = pm.variables.replaceIn('{{$randomEmail}}');",
							"",
							"const password = 'base_password';",
							"",
							"const username = pm.variables.replaceIn('{{$randomUserName}}');",
							"",
							"const role = 1;",
							"",
							"const phone = pm.variables.replaceIn('{{$randomPhoneNumber}}');",
							"",
							"const body = { firstname, lastname, email, password, username, role, phone };",
							"console.log(body);",
							"pm.collectionVariables.set('body', JSON.stringify(body));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/register"
			},
			"response": []
		},
		{
			"name": "User Log In",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const body = JSON.parse(pm.collectionVariables.get('body'));",
							"const email = body.email;",
							"const current_password = body.password;",
							"const username = body.username;",
							"",
							"pm.collectionVariables.set('user', JSON.stringify({",
							"    email : email, ",
							"    username : username,",
							"    current_password : current_password",
							"}));",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let json;",
							"try {",
							"    json = pm.response.json();",
							"    console.log(\"Full response body:\", JSON.stringify(json, null, 2));",
							"",
							"    pm.test(\"Login returned access token\", function () {",
							"        pm.expect(json).to.have.property(\"accessToken\");",
							"        pm.expect(json.accessToken).to.be.a('string').and.to.not.be.empty;",
							"    });",
							"",
							"    pm.collectionVariables.set(\"accesstoken\", json.accessToken);",
							"} catch (err) {",
							"    console.error(\"Failed to parse JSON response or access token missing:\", err);",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/login"
			},
			"response": []
		},
		{
			"name": "Changing Password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const utils = pm.require('@ali-9923282/utils');",
							"",
							"const body = JSON.parse(pm.collectionVariables.get('body'));",
							"const oldpassword = body.password;",
							"const newpassword = utils.generatePassword();",
							"",
							"body.password = newpassword;",
							"",
							"pm.collectionVariables.set('body', JSON.stringify(body));",
							"console.log(newpassword);",
							"console.log(body.password);",
							"",
							"",
							"pm.collectionVariables.set('changePasswordBody', JSON.stringify({",
							"    oldpassword: oldpassword,   ",
							"    newpassword: newpassword",
							"}));",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {
							"@ali-9923282/utils": {
								"id": "0196750e-c7b6-7bed-9c22-610a14e80f4a"
							}
						}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();",
							"pm.test(\"Response status should be 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains a message\", () => {",
							"    pm.expect(response).to.haveOwnProperty(\"message\");",
							"});",
							"",
							"pm.test(\"Message says password changed\", () => {",
							"    pm.expect(response.message.trim()).to.equal(\"Password changed successfully\");",
							"});",
							"",
							"pm.test(\"Response contains an accessToken\", () => {",
							"    pm.expect(response).to.haveOwnProperty(\"accessToken\");",
							"});",
							"",
							"pm.test(\"Access token is a non-empty string\", () => {",
							"    pm.expect(response.accessToken).to.be.a('string').and.to.not.be.empty;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{accesstoken}}"
					}
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{changePasswordBody}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/change"
			},
			"response": []
		},
		{
			"name": "Invalid New Password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const body = JSON.parse(pm.collectionVariables.get('changePasswordBody'));",
							"const oldpassword = body.password;",
							"const newpassword = '123';",
							"",
							"const requestBody = {oldpassword, newpassword};",
							"",
							"pm.collectionVariables.set('changePasswordBody', JSON.stringify(requestBody));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();",
							"",
							"pm.test(\"Response status should be 400\", () => pm.response.to.have.status(400));",
							"",
							"pm.test(\"Response contains a message\", () => {",
							"    pm.expect(response).to.haveOwnProperty(\"message\");",
							"});",
							"",
							"pm.test(\"Message says Invalid or missing password - must be at least 8 characters\", () => {",
							"    pm.expect(response.message.trim()).to.equal(\"Invalid or missing password - must be at least 8 characters\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{accesstoken}}"
					}
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{changePasswordBody}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/change"
			},
			"response": []
		},
		{
			"name": "Same Passwords",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const body = JSON.parse(pm.collectionVariables.get('body'));",
							"const oldpassword = body.password;",
							"console.log(oldpassword);",
							"const newpassword = oldpassword;",
							"",
							"const requestBody = {oldpassword, newpassword};",
							"",
							"pm.collectionVariables.set('changePasswordBody', JSON.stringify(requestBody));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();",
							"",
							"pm.test(\"Response status should be 400\", () => pm.response.to.have.status(400));",
							"",
							"pm.test(\"Response contains a message\", () => {",
							"    pm.expect(response).to.haveOwnProperty(\"message\");",
							"});",
							"",
							"pm.test(\"Message says New password must differ from current password\", () => {",
							"   pm.expect(response.message.trim()).to.equal(\"New password must differ from current password\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{accesstoken}}"
					}
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{changePasswordBody}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/change"
			},
			"response": []
		},
		{
			"name": "Incorrect Old Password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const utils = pm.require('@ali-9923282/utils');",
							"",
							"const oldpassword = \"incorrect\";",
							"const newpassword = utils.generatePassword();",
							"",
							"const requestBody = {oldpassword, newpassword};",
							"",
							"pm.collectionVariables.set('changePasswordBody', JSON.stringify(requestBody));"
						],
						"type": "text/javascript",
						"packages": {
							"@ali-9923282/utils": {
								"id": "0196750e-c7b6-7bed-9c22-610a14e80f4a"
							}
						}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();",
							"",
							"pm.test(\"Response status should be 400\", () => pm.response.to.have.status(400));",
							"",
							"pm.test(\"Response contains a message\", () => {",
							"    pm.expect(response).to.haveOwnProperty(\"message\");",
							"});",
							"",
							"pm.test(\"Message says Current password is incorrect\", () => {",
							"   pm.expect(response.message.trim()).to.equal(\"Current password is incorrect\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{accesstoken}}"
					}
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{changePasswordBody}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/change"
			},
			"response": []
		},
		{
			"name": "Missing Token",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const oldpassword = \"new_password\";",
							"const newpassword = \"new_password\";",
							"",
							"const requestBody = {oldpassword, newpassword};",
							"",
							"pm.collectionVariables.set('changePasswordBody', JSON.stringify(requestBody));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();",
							"",
							"pm.test(\"Response status should be 401\", () => pm.response.to.have.status(401));",
							"",
							"pm.test(\"Response contains a message\", () => {",
							"    pm.expect(response).to.haveOwnProperty(\"message\");",
							"});",
							"",
							"pm.test(\"Message says Missing token\", () => {",
							"   pm.expect(response.message.trim()).to.equal(\"Missing token\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": ""
					}
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{changePasswordBody}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/change"
			},
			"response": []
		},
		{
			"name": "Invalid Token",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const oldpassword = \"new_password\";",
							"const newpassword = \"new_password\";",
							"",
							"const requestBody = {oldpassword, newpassword};",
							"",
							"pm.collectionVariables.set('changePasswordBody', JSON.stringify(requestBody));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();",
							"",
							"pm.test(\"Response status should be 403\", () => pm.response.to.have.status(403));",
							"",
							"pm.test(\"Response contains a message\", () => {",
							"    pm.expect(response).to.haveOwnProperty(\"message\");",
							"});",
							"",
							"pm.test(\"Message says Invalid token\", () => {",
							"   pm.expect(response.message.trim()).to.equal(\"Invalid token\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "invalidToken"
					}
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{changePasswordBody}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/change"
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "body",
			"value": ""
		},
		{
			"key": "changePasswordBody",
			"value": ""
		},
		{
			"key": "login/change password jwt",
			"value": "",
			"type": "default"
		},
		{
			"key": "login/change password jwt",
			"value": ""
		},
		{
			"key": "jwt",
			"value": "",
			"type": "default"
		},
		{
			"key": "jwt",
			"value": ""
		},
		{
			"key": "jwt1",
			"value": "",
			"type": "default"
		},
		{
			"key": "jwt1",
			"value": ""
		},
		{
			"key": "jwt",
			"value": "",
			"type": "default"
		},
		{
			"key": "jwt",
			"value": ""
		},
		{
			"key": "user",
			"value": ""
		},
		{
			"key": "accessToken",
			"value": ""
		},
		{
			"key": "accesstoken",
			"value": ""
		}
	]
}